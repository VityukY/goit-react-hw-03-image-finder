{"version":3,"sources":["components/Searchbar.js","components/ImageGalleryItem.js","components/ImageGallery.js","components/services/featchImg.js","components/Modal.js","App.js","index.js"],"names":["SearchBar","state","query","handleChange","e","setState","currentTarget","value","submitHandler","preventDefault","props","className","onSubmit","this","onChange","type","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","id","url","onClickHandler","src","alt","height","onClick","ImageGallery","images","getLargeImage","map","image","webformatURL","largeImageURL","fetchImg","page","apiKey","axios","get","then","respons","data","hits","modalRootRef","document","querySelector","Modal","clickHandler","target","modalToogle","handleKeyDonw","code","loaderToogle","prevState","isLoading","window","addEventListener","removeEventListener","createPortal","imgURL","App","currentQuery","currentPage","largeImage","formHandler","modalToggle","fetchImages","newImages","finally","scrollTo","largeURL","scroll","scrollToBottom","prevProps","color","width","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"yRAwCeA,E,4MArCZC,MAAQ,CACLC,MAAO,I,EAGVC,aAAe,SAAAC,GACZ,EAAKC,SAAS,CAAEH,MAAOE,EAAEE,cAAcC,S,EAG1CC,cAAgB,SAAAJ,GACbA,EAAEK,iBACF,EAAKC,MAAMF,cAAc,EAAKP,MAAMC,OACpC,EAAKG,SAAS,CAAEH,MAAO,M,4CAE1B,WACG,OACG,wBAAQS,UAAU,YAAlB,SACG,uBAAMA,UAAU,aAAaC,SAAUC,KAAKL,cAA5C,UACM,uBACAM,SAAUD,KAAKV,aACfQ,UAAU,mBACVI,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZX,MAAOM,KAAKZ,MAAMC,QAGrB,wBAAQa,KAAK,SAASJ,UAAU,oBAAhC,SACG,sBAAMA,UAAU,0BAAhB,+B,GA7BMQ,aCYTC,EAdU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,eAClC,OACG,oBAAIZ,UAAU,mBAAd,SACG,qBACGa,IAAKF,EACLG,IAAI,QACJd,UAAU,yBACVe,OAAO,MACPC,QAASJ,KANuBF,ICgB7BO,EAhBM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cAC7B,OACG,oBAAInB,UAAU,eAAd,SACIkB,EAAOE,KAAI,SAAAC,GAAK,OACd,cAAC,EAAD,CACGX,GAAIW,EAAMX,GACVC,IAAKU,EAAMC,aACXV,eAAgB,WACbO,EAAcE,EAAME,wB,iBCEvBC,EAVE,SAACjC,GAAqB,IAAdkC,EAAa,uDAAN,EACvBC,EAAS,qCAEf,OAAOC,IACHC,IADG,qCAE6BrC,EAF7B,iBAE2CkC,EAF3C,gBAEuDC,EAFvD,yDAIHG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,KAAKC,SCN9BC,EAAeC,SAASC,cAAc,eAEvBC,E,4MAClB9C,MAAQ,G,EACR+C,aAAe,SAAA5C,GACRA,EAAE6C,SAAW7C,EAAEE,eAChB,EAAKI,MAAMwC,e,EAWjBC,cAAgB,SAAA/C,GACE,WAAXA,EAAEgD,MACH,EAAK1C,MAAMwC,e,EAIjBG,aAAe,WACZ,EAAKhD,UAAS,SAAAiD,GAAS,MAAK,CACzBC,WAAYD,EAAUC,e,uDAhB5B,WACGC,OAAOC,iBAAiB,UAAW5C,KAAKsC,iB,kCAG3C,WACGK,OAAOE,oBAAoB,UAAW7C,KAAKsC,iB,oBAe9C,WACG,OAAOQ,uBACJ,qBAAKhD,UAAU,QAAQgB,QAASd,KAAKmC,aAArC,SACG,qBAAKrC,UAAU,gBAAf,SACG,qBAAKa,IAAKX,KAAKH,MAAMkD,OAAQnC,IAAI,SAGvCmB,O,GAlC0BzB,aC0FpB0C,G,kNArFZ5D,MAAQ,CACL4B,OAAQ,GACRiC,aAAc,GACdC,YAAa,EACbC,WAAY,KACZT,WAAW,G,EAQdU,YAAc,SAAA1D,GACX,EAAKF,SAAS,CAAEyD,aAAcvD,EAAOwD,YAAa,EAAGlC,OAAQ,M,EAGhEqC,YAAc,WACX,EAAK7D,SAAS,CAAE2D,WAAY,M,EAE/BX,aAAe,WACZ,EAAKhD,UAAS,SAAAiD,GAAS,MAAK,CACzBC,WAAYD,EAAUC,e,EAG5BY,YAAc,WAAO,IAAD,EACqB,EAAKlE,MAAnC6D,EADS,EACTA,aAAcC,EADL,EACKA,YAEtB,EAAKV,eAELlB,EAAS2B,EAAcC,GACnBvB,MAAK,SAAA4B,GACH,EAAK/D,UAAS,SAAAiD,GAAS,MAAK,CACzBzB,OAAO,GAAD,mBAAMyB,EAAUzB,QAAhB,YAA2BuC,IACjCL,YAAaT,EAAUS,YAAc,SAG1CM,SAAQ,WACN,EAAKhB,eACL,EAAKiB,e,EAGdxC,cAAgB,SAAAyC,GACb,EAAKlE,SAAS,CAAE2D,WAAYO,K,EAG/BD,SAAW,WACRE,gBAAOC,kB,wDAvCV,SAAmBC,EAAWpB,GACvBA,EAAUQ,eAAiBjD,KAAKZ,MAAM6D,cACvCjD,KAAKsD,gB,oBAwCX,WAAU,IAAD,EACoCtD,KAAKZ,MAAvC4B,EADF,EACEA,OAAQmC,EADV,EACUA,WAAYT,EADtB,EACsBA,UAC5B,OACG,qCACG,cAAC,EAAD,CAAW/C,cAAeK,KAAKoD,cAC/B,cAAC,EAAD,CAAcpC,OAAQA,EAAQC,cAAejB,KAAKiB,gBACjDyB,GACE,qBAAK5C,UAAU,SAAf,SACG,cAAC,IAAD,CACGI,KAAK,eACL4D,MAAM,UACNjD,OAAQ,GACRkD,MAAO,OAKG,IAAlB/C,EAAOgD,SAAiBtB,GACtB,wBACGxC,KAAK,SACLY,QAASd,KAAKsD,YACdxD,UAAU,aAHb,0BASFqD,EAAa,GACX,cAAC,EAAD,CAAOd,YAAarC,KAAKqD,YAAaN,OAAQI,W,GA/E3C7C,c,MCJlB2D,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHnC,SAASoC,eAAe,W","file":"static/js/main.d7b82471.chunk.js","sourcesContent":["import { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n   state = {\r\n      query: '',\r\n   };\r\n\r\n   handleChange = e => {\r\n      this.setState({ query: e.currentTarget.value });\r\n   };\r\n\r\n   submitHandler = e => {\r\n      e.preventDefault();\r\n      this.props.submitHandler(this.state.query);\r\n      this.setState({ query: '' });\r\n   };\r\n   render() {\r\n      return (\r\n         <header className=\"Searchbar\">\r\n            <form className=\"SearchForm\" onSubmit={this.submitHandler}>\r\n                  <input\r\n                  onChange={this.handleChange}\r\n                  className=\"SearchForm-input\"\r\n                  type=\"text\"\r\n                  autoComplete=\"off\"\r\n                  autoFocus\r\n                  placeholder=\"Search images and photos\"\r\n                  value={this.state.query}\r\n               />\r\n\r\n               <button type=\"submit\" className=\"SearchForm-button\">\r\n                  <span className=\"SearchForm-button-label\">Search</span>\r\n               </button>\r\n\r\n\r\n            </form>\r\n         </header>\r\n      );\r\n   }\r\n}\r\nexport default SearchBar;\r\n","const ImageGalleryItem = ({ id, url, onClickHandler }) => {\r\n   return (\r\n      <li className=\"ImageGalleryItem\" key={id}>\r\n         <img\r\n            src={url}\r\n            alt=\"noalt\"\r\n            className=\"ImageGalleryItem-image\"\r\n            height=\"200\"\r\n            onClick={onClickHandler}\r\n         />\r\n      </li>\r\n   );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import ImageGalleryItem from './ImageGalleryItem';\r\n\r\nconst ImageGallery = ({ images, getLargeImage }) => {\r\n   return (\r\n      <ul className=\"ImageGallery\">\r\n         {images.map(image => (\r\n            <ImageGalleryItem\r\n               id={image.id}\r\n               url={image.webformatURL}\r\n               onClickHandler={() => {\r\n                  getLargeImage(image.largeImageURL);\r\n               }}\r\n            />\r\n         ))}\r\n      </ul>\r\n   );\r\n};\r\n\r\nexport default ImageGallery;\r\n","import axios from 'axios';\r\n\r\nconst fetchImg = (query, page = 1) => {\r\n   const apiKey = '20439634-6c644a175487626659667f77f';\r\n\r\n   return axios\r\n      .get(\r\n         `https://pixabay.com/api/?q=${query}&page=${page}&key=${apiKey}&image_type=photo&orientation=horizontal&per_page=12`,\r\n      )\r\n      .then(respons => respons.data.hits);\r\n};\r\n\r\nexport default fetchImg;\r\n","import { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst modalRootRef = document.querySelector('#modal-root');\r\n\r\nexport default class Modal extends Component {\r\n   state = {};\r\n   clickHandler = e => {\r\n      if (e.target === e.currentTarget) {\r\n         this.props.modalToogle();\r\n      }\r\n   };\r\n   componentDidMount() {\r\n      window.addEventListener('keydown', this.handleKeyDonw);\r\n   }\r\n\r\n   componentWillUnmount() {\r\n      window.removeEventListener('keydown', this.handleKeyDonw);\r\n   }\r\n\r\n   handleKeyDonw = e => {\r\n      if (e.code === 'Escape') {\r\n         this.props.modalToogle();\r\n      }\r\n   };\r\n\r\n   loaderToogle = () => {\r\n      this.setState(prevState => ({\r\n         isLoading: !prevState.isLoading,\r\n      }));\r\n   };\r\n\r\n   render() {\r\n      return createPortal(\r\n         <div className=\"modal\" onClick={this.clickHandler}>\r\n            <div className=\"modal-content\">\r\n               <img src={this.props.imgURL} alt=\"\" />\r\n            </div>\r\n         </div>,\r\n         modalRootRef,\r\n      );\r\n   }\r\n}\r\n","import { Component } from 'react';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\nimport Loader from 'react-loader-spinner';\r\nimport SearchBar from './components/Searchbar';\r\nimport ImageGallery from './components/ImageGallery';\r\nimport fetchImg from './components/services/featchImg';\r\nimport Modal from './components/Modal';\r\n\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nclass App extends Component {\r\n   state = {\r\n      images: [],\r\n      currentQuery: '',\r\n      currentPage: 1,\r\n      largeImage: null,\r\n      isLoading: false,\r\n   };\r\n\r\n   componentDidUpdate(prevProps, prevState) {\r\n      if (prevState.currentQuery !== this.state.currentQuery) {\r\n         this.fetchImages();\r\n      }\r\n   }\r\n   formHandler = value => {\r\n      this.setState({ currentQuery: value, currentPage: 1, images: [] });\r\n   };\r\n\r\n   modalToggle = () => {\r\n      this.setState({ largeImage: '' });\r\n   };\r\n   loaderToogle = () => {\r\n      this.setState(prevState => ({\r\n         isLoading: !prevState.isLoading,\r\n      }));\r\n   };\r\n   fetchImages = () => {\r\n      const { currentQuery, currentPage } = this.state;\r\n\r\n      this.loaderToogle();\r\n\r\n      fetchImg(currentQuery, currentPage)\r\n         .then(newImages => {\r\n            this.setState(prevState => ({\r\n               images: [...prevState.images, ...newImages],\r\n               currentPage: prevState.currentPage + 1,\r\n            }));\r\n         })\r\n         .finally(() => {\r\n            this.loaderToogle();\r\n            this.scrollTo();\r\n         });\r\n   };\r\n   getLargeImage = largeURL => {\r\n      this.setState({ largeImage: largeURL });\r\n   };\r\n\r\n   scrollTo = () => {\r\n      scroll.scrollToBottom();\r\n   };\r\n\r\n   render() {\r\n      const { images, largeImage, isLoading } = this.state;\r\n      return (\r\n         <>\r\n            <SearchBar submitHandler={this.formHandler} />\r\n            <ImageGallery images={images} getLargeImage={this.getLargeImage} />\r\n            {isLoading && (\r\n               <div className=\"loader\">\r\n                  <Loader\r\n                     type=\"BallTriangle\"\r\n                     color=\"#00BFFF\"\r\n                     height={80}\r\n                     width={80}\r\n                  />\r\n               </div>\r\n            )}\r\n\r\n            {images.length !== 0 && !isLoading && (\r\n               <button\r\n                  type=\"button\"\r\n                  onClick={this.fetchImages}\r\n                  className=\"loadButton\"\r\n               >\r\n                  Load more...\r\n               </button>\r\n            )}\r\n\r\n            {largeImage > 0 && (\r\n               <Modal modalToogle={this.modalToggle} imgURL={largeImage} />\r\n            )}\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './components/styles.css';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}